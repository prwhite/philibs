/////////////////////////////////////////////////////////////////////
//
//    file: animmatrixhelper.cpp
//
/////////////////////////////////////////////////////////////////////

#include "animmatrixhelper.h"

#include "scenetypes.h"

/////////////////////////////////////////////////////////////////////

namespace anim {
  
/////////////////////////////////////////////////////////////////////

matrixHelper::matrixHelper() :
  mScale ( 1.0f, 1.0f, 1.0f ),
  mRotMode ( Undef ),
  mDirty ( false )
{
  
}

// matrixHelper::~matrixHelper()
// {
// 
// }
// 
// matrixHelper::matrixHelper(matrixHelper const& rhs)
// {
//   
// }
// 
// matrixHelper& matrixHelper::operator=(matrixHelper const& rhs)
// {
//   
//   return *this;
// }
// 
// bool matrixHelper::operator==(matrixHelper const& rhs) const
// {
//   
//   return false;
// }

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

pni::math::matrix4& matrixHelper::updateMatrix ()
{
  if ( mDirty )
  {
    mMat.setTrans ( mTrans );
    if ( mRotMode == AngleAxis )
      mMat.preRot ( mAngleAxis[ 0 ], mAngleAxis[ 1 ], mAngleAxis[ 2 ], mAngleAxis[ 3 ] );
    else if ( mRotMode == Quat )
      mMat.preQuat ( mQuat );
    mMat.preScale ( mScale );
    
    mDirty = false;
  }
  
  return mMat;
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

void matrixHelper::collectRefs ( pni::pstd::refCount::Refs& refs )
{
  
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

} // end of namespace anim 


